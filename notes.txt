NAME IDEAS
- Tolang
- Tol, Tol-lang

PRIOS: 
- destructuring, finish function evaluation
- position for errors

## Descrption

Three data structures:

() {} []

Records (),  named data, unordered entries, static shape.
Maps {},     named data, unordered entries, dynamic shape.
Lists [],  unnamed data, ordered entries, dynamic shape.
Tuples N/A unnamed data, ordered entries, static shape

unnamed + unordered doesn't make sense
named + ordered sounds useful, but hard to define and edit mantaining consistency

match list {
  case []
  case [h, ...t]
  case [...h, t]
  case [a, b, c,,,f]
  {}
}

const foo = () => {

}


Function(name: "foo", block: ...)


match map {
  case {}
  case { 'foo': value }
  case { 'foo': value, ...rest }
}


const four = Card.Number(value: 4)

// Matches, like all functions, always necessitate a record
// But that's fine I think, since being easily extensible

function printCard matches (card: Card) {
  case (card: Card.Number(value: value)) {
    console.log("number", value)
  }

  case (card: Card.King())
  case (card: Card.Queen())
  case (card: Card.Jack()) {
    console.log("suit")
  }

}


// Implement this once shorthand record literal has been implemented, ie
// const x = 1
// const y = 1
// const point = Point(x, y)
match (point) {
  case Point(x): // this should bind x
  case Point(x: x) // this should be the exact same and bind x
}


ALON

(
  name: "Hello World",
  isMessage: true,
  render: (
    fontSize: 20,
    color: 'red',
  )
)


() => records
{} => maps
[] => lists
// no tuples

const data: (x: number | string)

match (data) {
  case (kind: "animal", data: (name: name is "string")) {}
  case (kind: "animal", data: (name: name is "number")) {}
}



// todo, context, state
function App(props: Props) {

}


function render() {
  const ui = react (App)

}

- Features:
  - Reactivity built in
  - 




///////////////////

Compilation: 

function ensureExhaustive(x: never): never {
  throw new Error("Unhandled switch case");
}

// Typescript defines a `Number` class, avoid collisions by always pre-pending '$'.
// I really only have to do this on sub-classes though no? Since the parent colliding
// with a class that's already defined is maybe good?

class Super {
  static Sub = class Sub {};
}

const a = new Super.Sub();

type $CardVariant = "King" | "Queen" | "Jack" | "Number";
class $Card {
  readonly __variant: $CardVariant;
  constructor(__variant: $CardVariant) {
    this.__variant = __variant;
  }
  static King = class King extends $Card {
    constructor() {
      super("King");
    }
  };
  static Queen = class Queen extends $Card {
    constructor() {
      super("Queen");
    }
  };
  static Jack = class Jack extends $Card {
    constructor() {
      super("Jack");
    }
  };
  static Number = class Number extends $Card {
    value: number;
    constructor(value: number) {
      super("Number");
      this.value = value;
    }
  };
}

/**
 * match (card) {
 *  case Number(value: value) {
 *      console.log(value)
 *  }
 * }
 *
 *
 */

function printCard(
  card: $Card,
  kingClause: () => void,
  queenClause: () => void,
  jackClause: () => void,
  numberClause: (value: number) => void
) {
  switch (card.__variant) {
    case "King":
    case "Queen":
    case "Jack":
      break;
    case "Number":
      const cardNumber = card as any as InstanceType<typeof $Card["Number"]>;
      const value = cardNumber.value;
      return numberClause(value);
    default:
      ensureExhaustive(card.__variant);
  }
}

const four = new $Card.Number(4);
four.value

// class Point {
//   x: number;
//   y: number;
// }



const program = `
export type Point (
  x: number,
  y: number,
)

*.add(a: Point, b: Point) => Point {
  return (
    x: a.x + b.x, 
    y: a.y + b.y
  )
}

.origin() => Point {
  return (x: 0, y: 0)
}

.double Point {
  return (x: arg.x * 2, b: arg.x * 2)
}

.double(a: Point) {
  return (x: a.x * 2, b: b.x * 2)
}

//////////  point.achi
//////////  point.extra.achi // Can extend point.
////////////////// if named differently, error when attempting
////////////////// to define a new function in point

import { Point } from "./point"

Point.unit() => Point {
  return (x: 1, y: 1)
}


const foo = Point(x:3, y:3)

foo = foo
  .double()
  .add(Point(x:3, y:3))



// index.achi

type LinkedMap<T>(
  _map: Map<string, T>,
) as Subbable<T> (
  subscriptors: Set<() => void>,
) as StateHashable (
  mutationHash: number,
)

.set<T>(lm: LinkedMap<T>, key: string, val: T) {
  lm._map.set(key, val);
  Subbable.notify(lm)
  StateHashable.didMutate(lm)
}




// Usage

Point.add(a, b)


const x = Point(x: 1, y: 2)

function add (a: Point, b: Point) {
  
}

const serialize(this: Point) {
  
}

x.serialize()

`;
